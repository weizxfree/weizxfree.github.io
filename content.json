{"meta":{"title":"大数据采集与分析小站","subtitle":"一个大数据采集、分析的经验分享平台","description":"专注于大数据埋点采集、分析的知识分享平台","author":"Tom","url":"https://www.datatower.site","root":"/"},"pages":[{"title":"","date":"2024-09-24T02:40:52.388Z","updated":"2024-09-24T02:40:52.388Z","comments":true,"path":"privacy/index.html","permalink":"https://www.datatower.site/privacy/index.html","excerpt":"","text":"本软件尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本软件会按照本隐私权政策的规定使用和披露您的个人信息。但本软件将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本软件不会将这些信息对外披露或向第三方提供。本软件会不时更新本隐私权政策。您在同意本软件服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于本软件服务使用协议不可分割的一部分。1.适用范围a)在您使用本软件网络服务，本软件自动接收并记录的您的手机上的信息，包括但不限于您的健康数据、使用的语言、访问日期和时间、软硬件特征信息及您需求的网页记录等数据；2.信息的使用a)在获得您的数据之后，本软件会将其上传至服务器，以生成您的排行榜数据，以便您能够更好地使用服务。3.信息披露a)本软件不会将您的信息披露给不受信任的第三方。b)根据法律的有关规定，或者行政或司法机构的要求，向第三方或者行政、司法机构披露；c)如您出现违反中国有关法律、法规或者相关规则的情况，需要向第三方披露；4.信息存储和交换本软件收集的有关您的信息和资料将保存在本软件及（或）其关联公司的服务器上，这些信息和资料可能传送至您所在国家、地区或本软件收集信息和资料所在地的境外并在境外被访问、存储和展示。5.信息安全a)在使用本软件网络服务进行网上交易时，您不可避免的要向交易对方或潜在的交易对方披露自己的个人信息，如联络方式或者邮政地址。请您妥善保护自己的个人信息，仅在必要的情形下向他人提供。如您发现自己的个人信息泄密，请您立即联络本软件客服，以便本软件采取相应措施。"}],"posts":[{"title":"埋点 SDK 数据采集软件架构","slug":"track_tec","date":"2024-09-27T06:16:07.071Z","updated":"2024-09-27T08:14:45.772Z","comments":true,"path":"2024/09/27/track_tec/","permalink":"https://www.datatower.site/2024/09/27/track_tec/","excerpt":"","text":"背景在服务近 2000 家客户的过程中，客户对埋点采集 SDK 提出各式各样的需求。 从需求的类型来看大致分成两种：安全你合规以及功能类需求。 安全合规类型 禁止特定属性上报 禁止特定 API 进行调用 源码里禁止特定关键词 个人信息匿名化 数据采集、存储、传输加密 功能类型 用户行为数据精细化采集，如点击、浏览、曝光 支持多实例，同一个 App 可将数据发送到不同地址 配合分析以及营销相关数据采集，如推送、弹窗、可视化埋点 从端的角度来看，数据采集分成客户端以及服务端 端 系统 客户端 Android&#x2F;iOS&#x2F;Web&#x2F;小程序&#x2F;三方框架&#x2F;游戏引擎 Paragraph Java&#x2F;PHP&#x2F;Ruby&#x2F;Python&#x2F;Lua 对于什么时候应该用客户端埋点，什么时候使用服务端埋点，遵循一个原则：永远优先从服务端采集，只有当服务端采集不到，才考虑在客户端采集。 埋点系统软件架构原则开放性足够的开放，数据采集、存储、传输全过程是可以任意定制的，比如加密算法定制、采集数据定制、上报的数据格式、数据传输过程中 SSL 证书配置等。 稳定性一个优秀的埋点 SDK ，在任何场景下不应该影响到宿主容器应用，比如性能以及 crash 问题。 数据准确性由于网络环境以及用户行为不确定性和设备的多样性，SDK 需要尽可能保证数据不重不漏。 SDK 技术架构数据存储和传输策略服务端 SDK 相对于客户端 SDK 来说简单很多，这里以客户端举例来看： 不同于服务端，移动设备上的资源是非常有限的，采取实时上报的方式势必会造成 App 整体性能的下降，如何平衡性能与数据上报的时效性是 SDK 需要面临的一个挑战。 目前 SDK 中使用的数据上报策略是事件触发后不立即上报，而是先将事件缓存在本地，然后满足一定的条件再进行上报。 SDK 每次触发事件时会检查如下条件，用于判断是否向服务端上报数据： 1. 当前网络是否符合发送策略 flushNetworkPolicy（默认 3G、4G、5G、WiFi）； 2. 与上次发送的时间间隔是否大于指定的时间间隔 flushInterval（默认 15 秒）； 3. 本地缓存的事件条数是否大于最大缓存事件数 flushBulkSize（默认 100 条）。 只有 1、2 或者 1、3 满足时，SDK 才会发送数据。当然，为了满足不同的需求，可以通过修改 flushNetworkPolicy、flushInterval、flushBulkSize 的值来控制事件上报。 对于 Web 以及小程序而言，和 Android &amp; iOS 相比最大的区别在于缓存的稀缺的，通常用 localstorage来进行存储，一般 200-300 条就会满，所以需要更频繁的去发送，确保数据不会漏掉。 极端场景适配典型场景如退到后台和强杀应用，这两个场景，需要针对性进行处理，确保数据尽快的存储和发送。 技术架构需要考虑以下几个模式的应用：生产消费者架构，事件队列。依照数据流处理过程，可将模块抽象为数据采集拼装、数据入库、数据传输。 Q&amp;A在什么场景下，数据可能会发生丢失？以下场景下会可能发生丢失： SDK 本地缓存满了，达到上限 Web SDK 采用实时发送模式，网络环境较差或者浏览器强杀则丢失 App 卸载和浏览器清除数据 数据未入库前 App 强杀 上述场景是由 App 或浏览器的用户行为发起，在极端环境下产生的数据丢失。这种现象从理论上来看无法真正消除，只能尽可能去保证数据不丢。 如何保障数据不重不漏？ SDK 端持久化缓存和数据重试发送策略 本地数据库（持久化） 合理的上报策略（数据条数以及数据发送间隔） 异常场景优化（退后台、App 强杀） 重试发送（根据状态码判定上报状态） SDK 优秀架构（生产消费者模型） 服务端状态回传以及去重机制 总结以上就是埋点采集系统技术架构上需要考虑的点，埋点是一件看起来简单，实际很复杂的一件事情。随着系统以及合规政策的日新月异，埋点也需要不断适配。只有构建好了足够坚实的数据根基，才能有效支持上层的数据分析以及运营。","categories":[],"tags":[]},{"title":"亚马逊逆向工作法","slug":"method_begin_end","date":"2024-09-24T10:55:46.591Z","updated":"2024-09-27T06:15:12.737Z","comments":true,"path":"2024/09/24/method_begin_end/","permalink":"https://www.datatower.site/2024/09/24/method_begin_end/","excerpt":"","text":"职场工作十年有余，见证了老同事带领团队辛辛苦苦做了一个项目两年多，项目上线后，发现一个关键的性能问题未解决，导致客户无法集成使用，几十人的团队，两年多的付出都付诸东流。这件事给我深刻的感触，如果是我或者你，身处棋局，如何尽可能保证我们做出来的事情达成目标，降低失败的可能性？ 什么是逆向工作法 逆向工作法指的是把战略建立在不变的事物上。来源于亚马逊创始人贝佐斯，每当他不得不做出重大决策时，他常常会以这种方式来思考问题，比如贝佐斯认为在零售业，客户永远不变的就是想要更低的价格、更快捷的配送和更多样的选择,企业必须先搞清楚客户究竟要什么，再进行逆向操作，在对的事情上投入大量精力，只有这样企业才能在未来持续获血。 贝佐斯的逆向工作法贝佐斯在选择创业时，老板多方挽留。他也不确定自己创业是否能成功，在他作出决定之前，他做了一个最小化后悔表,“假设自己80岁高龄时,对20岁时没有创业会不会后悔?” 答案是显而易见的，他不会因为自己没有成为更高阶的职业经理人而后悔，但是如果没有创业他一定会后悔。贝佐斯后来还将这种逻辑应用到他的个人生活中，每当他不得不做出重大决策时，他常常会以这种方式来思考问题。 这就是“逆向工作法”，其最关键的就是找到你一开始做这件事情的最初目的，然后根据这个目的去工作。 而与之形成鲜明对比的“技能导向法”则主张“我们擅长做什么”、“ 通过做什么，还能再做什么?”尽管不少时候，技能导向法是一种有用并且一定程度上奏效的商业模式。但如果沉浸于此，就会丧失创新的动力。 乔布斯领导的苹果公司采取的常常是“技能导向法”，苹果公司的创新往往是技术的变革以及乔布斯天马行空的想象力结合的产物。在这个方法下，企业更倾向于领导客户，改变消费观念，让顾客接受它的产品和理念。 而贝佐斯认为，亚马逊网站设计的总体哲学是对客户友好，应该将注意力放在顾客身上，而不是网站上。他的目标不仅是让浏览书籍变得更容易，而且要让这成为-种愉快的体验。正是在这种哲学之下，亚马逊发明了“一键下单”功能以方便顾客购买;还有“书内阅读”、“书内搜索”功能，获得了广大顾客尤其是大学生群体的喜爱和追捧。 正是这种为顾客着想的态度赢得了顾客的好感，亚马逊的书评区更像-一个社交平台, 人们在这里畅所欲言，也正因为通过这种方式建立起来的顾客群体和良好口碑，亚马逊的图书销量不断提升。 以终为始逆向工作法是一个很好的思维方式。通过以目标倒推关键节点或产品策略，最终达成聚焦的目的。如果要问逆向工作法最重要的一点是什么？一定是思维习惯的转变：“逆向工作法” 的根本出发点，是从内部或公司的视角转变为客户的视角。 新闻稿逆向工作法说起来简单，实施起来却很难。因为人的思维习惯天然的从正向思考，根据已有的经验和思维习惯惯性的往前冲。亚马逊的逆向工作法中有一点我想和大家分享下：新闻稿。 新闻稿让读者拥有最精彩的客户体验。常见问题提供关于客户体验的所有重要细节，同时又能全面而清晰地评估公司打造该产品或创造该服务将面临多大的成本或挑战。 新闻稿主要包括下列部分： 标题：以阅读者（你的目标客户）容易理解的方式点出产品的名字。 副标题：描述产品以及客户使用该产品的益处。 摘要：首先写明城市、媒体渠道以及计划发布的日期，然后简述产品的情况及其好处。 问题：描述产品要解决的具体问题。一定要从客户的角度写这个部分。 解决方案：较为详细地描述你的产品，以及它如何便捷地解决客户的问题。 引用及购买：引用公司发言人的一句话，再引用假想客户的一句话，表明他们使用你的新产品所获得的各种好处。要表明购买该产品方便、快捷，给出网站链接，以便让客户获取更多信息和购买产品。 常见问题通常可分为对外常见问题（关注客户）和对内常见问题（关注公司）。对外常见问题是客户或媒体会对有关产品提出的问题，包括产品的工作方式、价格、如何及何处购买等更为细节的问题。这些问题是针对具体产品的，因而每份 PR&#x2F;FAQ 的常见问题都是独特的。对内常见问题则有更标准化的、需要予以解答的问题清单。 其实这里就是 “以终为始” 的思想，我们可以同时引入 “新闻稿” 和 “常见问题”。 KindleKindle 作为家喻户晓的电子书阅读器，这个产品的决策过程是非常值得学习的。Kindle的两大创新在于无线传送和电子墨水屏。作为一个市面上从未见过的产品，这些创新点在决策时运用了逆向工作法，只有无线传送，才可以把图书馆装到自己的口袋，而不是先考虑技术如何实现；只有电子墨水屏，才能实现接近纸质书的阅读体验。从客户的需求出发，倒推出产品的核心竞争点。这是典型的应用场景。 总结逆向工作法本质上是思维方式的改变，由公司内部转变成市场客户，把战略的设定基于「不变的」的基本点，倒推执行。","categories":[],"tags":[]},{"title":"埋点","slug":"data_track","date":"2024-09-24T10:55:46.586Z","updated":"2024-09-27T06:13:06.292Z","comments":true,"path":"2024/09/24/data_track/","permalink":"https://www.datatower.site/2024/09/24/data_track/","excerpt":"","text":"在大数据领域，数据源有多种途径，如服务端、数据仓库、客户端等。客户端包含 Android、iOS、网页、小程序，以及 Flutter、React Native、uni-app 等第三方框架或平台。对于客户端应用和网页而言，埋点是大数据分析系统中不可或缺的组成部分。 什么是埋点？自 2010 年起，国内涌现出一批专注于用户行为分析和自动化运营的大数据服务商，如神策数据、GrowingIO、易观、火山引擎等。在为银行、证券、零售、企业等多个行业提供服务的过程中，我们意识到一个基础且关键的点：数据根基的重要性。 常见的问题有：为什么我的数据丢失了？为什么不同平台的数据量存在巨大差异？ 这些问题时常发生。这些问题都印证了一点：数据质量对整个系统至关重要。 数据质量的重要性如果数据质量出现问题，后续的分析和运营几乎无从谈起。即使生成了一份看似完美的报表和结论，其背后的真实性依然存疑。 常见的埋点类型1. 代码埋点代码埋点，顾名思义，就是通过代码实现数据上报的方式。它的优点是灵活性高，可以根据业务需求采集更具针对性的数据，提升数据分析的精确度。 但它的缺点同样明显：代码埋点需要随 App 版本发布才能生效，周期较长，开发成本较高。随着时间推移，滚动增加的埋点可能导致质量和效率的下降。 2. 可视化埋点可视化埋点，即通过直观的界面操作，用户可以通过点击、选择等方式轻松完成埋点操作。这种方式降低了技术门槛，使得没有开发背景的人员也能独立完成埋点工作。 这种方式虽然提高了便捷性，但也存在埋点碎片化的问题，尤其是在 App 或网页频繁更新时。比如，今天设置的埋点有效，可能几个月后就失效了。此外，不同平台（如 Android、iOS、Web）仍需分别配置，增加了工作量。 可视化埋点和代码埋点相辅相成，适用于不同的业务场景。例如，在 App 内嵌的 H5 活动页面上，运营人员可以通过可视化埋点轻松满足需求。 3. 无埋点无埋点，也被称为全埋点，是通过集成 SDK 的方式，自动采集用户行为数据，如页面浏览、停留、点击、离开等用户操作信息。这种方式的最大优势是显著降低了开发成本，便于快速采集基础的用户行为数据。 然而，无埋点的局限性在于只能采集标准的用户交互数据，无法捕捉具体的业务信息。例如，用户购买了哪件商品、商品的价格等细节数据是无法自动获取的。 4. Tag ManagerTag Manager（标签管理器）在国外较为流行，典型代表是 Google Tag Manager。它不仅仅用于埋点，还可用于管理网站或 App 上的各种追踪代码。 Tag Manager 结合了代码埋点和可视化埋点的优点，尤其适合 Web 场景。由于 JavaScript 的灵活性，Tag Manager 可以根据设定的规则动态下发代码，避免了每次更新代码都需重新发布的问题，埋点也能实时生效。然而，对于移动端，它的应用场景则相对有限。 未来，国内或许也会诞生类似 Google Tag Manager 的工具。 总结无论采用哪种埋点方式，都需要结合实际的业务场景进行选择。如果是偏业务类的信息，服务端埋点更为合适；而偏向应用交互的信息，则适合在客户端埋点。对于开发资源紧张的团队，可以选择无埋点或可视化埋点；若追求数据的全面性和灵活性，则代码埋点是不二之选。 归根结底，埋点的核心是围绕业务指标服务，而不是追求面面俱到。合适的才是最好的。","categories":[],"tags":[]}],"categories":[],"tags":[]}